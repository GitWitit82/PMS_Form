generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Contact {
  contact_id  Int      @id @default(autoincrement())
  customer_id Int
  name        String
  email       String?
  phone       String?
  role        String?
  created_at  DateTime @default(now())
  Customer    Customer @relation(fields: [customer_id], references: [customer_id], onDelete: Cascade)
}

model Customer {
  customer_id Int       @id @default(autoincrement())
  name        String
  email       String?
  phone       String?
  created_at  DateTime  @default(now())
  Contact     Contact[]
  Project     Project[]
}

model Department {
  department_id Int        @id @default(autoincrement())
  name          String     @unique
  description   String?
  created_at    DateTime   @default(now())
  Resource      Resource[]
  Task          Task[]
}

model Project {
  project_id  Int       @id @default(autoincrement())
  customer_id Int
  name        String
  description String?
  start_date  DateTime?
  end_date    DateTime?
  status      String    @default("Not Started")
  created_at  DateTime  @default(now())
  Customer    Customer  @relation(fields: [customer_id], references: [customer_id], onDelete: Cascade)
  Task        Task[]
}

model Resource {
  resource_id   Int        @id @default(autoincrement())
  department_id Int
  name          String
  email         String?    @unique
  phone         String?
  is_active     Boolean    @default(true)
  created_at    DateTime   @default(now())
  user_id       Int?       @unique
  Department    Department @relation(fields: [department_id], references: [department_id], onDelete: Cascade)
  Task          Task[]
  user          User?      @relation(fields: [user_id], references: [user_id])
}

model Task {
  task_id                Int         @id @default(autoincrement())
  project_id             Int
  resource_id            Int?
  department_id          Int?
  name                   String
  description            String?
  scheduled_start_time   DateTime?
  scheduled_start_date   DateTime?
  scheduled_end_time     DateTime?
  scheduled_end_date     DateTime?
  actual_start_time      DateTime?
  actual_start_date      DateTime?
  actual_end_time        DateTime?
  actual_end_date        DateTime?
  delay_duration         String?
  delay_reason           String?
  delay_status           String?
  completion_status      String?
  priority               String?
  status                 String      @default("Pending")
  last_status_updated_at DateTime?
  created_at             DateTime    @default(now())
  Department             Department? @relation(fields: [department_id], references: [department_id])
  Project                Project     @relation(fields: [project_id], references: [project_id], onDelete: Cascade)
  Resource               Resource?   @relation(fields: [resource_id], references: [resource_id])
}

enum UserRole {
  ADMIN
  STAFF
  PROJECT_MGT
  CEO
}

model User {
  user_id    Int       @id @default(autoincrement())
  username   String    @unique
  email      String    @unique
  pin_hash   String
  role       UserRole  @default(STAFF)
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  resource   Resource?
  Activity   Activity[]
  workflows_created Workflow[] @relation("WorkflowCreator")
  workflows_updated Workflow[] @relation("WorkflowUpdater")
  workflow_instances WorkflowInstance[]

  @@map("users")
}

enum WorkflowStatus {
  DRAFT
  ACTIVE
  ARCHIVED
  DEPRECATED
}

enum WorkflowStepType {
  TASK
  APPROVAL
  NOTIFICATION
  CONDITION
  INTEGRATION
  CUSTOM
}

enum WorkflowTransitionType {
  AUTOMATIC
  MANUAL
  CONDITIONAL
  SCHEDULED
}

model Workflow {
  workflow_id    Int            @id @default(autoincrement())
  name          String
  description   String?
  version       Int            @default(1)
  status        WorkflowStatus @default(DRAFT)
  is_template   Boolean        @default(false)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  created_by    Int
  updated_by    Int
  steps         WorkflowStep[]
  instances     WorkflowInstance[]
  user_creator  User          @relation("WorkflowCreator", fields: [created_by], references: [user_id])
  user_updater  User          @relation("WorkflowUpdater", fields: [updated_by], references: [user_id])

  @@index([status])
  @@index([is_template])
}

model WorkflowStep {
  step_id       Int              @id @default(autoincrement())
  workflow_id   Int
  name          String
  description   String?
  step_type     WorkflowStepType
  order        Int
  config       Json            @default("{}")
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  workflow      Workflow       @relation(fields: [workflow_id], references: [workflow_id], onDelete: Cascade)
  transitions_from TransitionRule[] @relation("FromStep")
  transitions_to   TransitionRule[] @relation("ToStep")
  step_instances WorkflowStepInstance[]

  @@index([workflow_id, order])
  @@index([step_type])
}

model TransitionRule {
  rule_id       Int                  @id @default(autoincrement())
  from_step_id  Int
  to_step_id    Int
  name          String
  description   String?
  type          WorkflowTransitionType
  conditions    Json                @default("{}")
  config        Json                @default("{}")
  created_at    DateTime           @default(now())
  updated_at    DateTime           @updatedAt
  from_step     WorkflowStep       @relation("FromStep", fields: [from_step_id], references: [step_id], onDelete: Cascade)
  to_step       WorkflowStep       @relation("ToStep", fields: [to_step_id], references: [step_id], onDelete: Cascade)

  @@index([from_step_id])
  @@index([to_step_id])
  @@index([type])
}

model WorkflowInstance {
  instance_id   Int                    @id @default(autoincrement())
  workflow_id   Int
  status        String
  context       Json                  @default("{}")
  started_at    DateTime             @default(now())
  completed_at  DateTime?
  created_by    Int
  workflow      Workflow             @relation(fields: [workflow_id], references: [workflow_id])
  user_creator  User                 @relation(fields: [created_by], references: [user_id])
  step_instances WorkflowStepInstance[]

  @@index([workflow_id])
  @@index([status])
  @@index([created_by])
}

model WorkflowStepInstance {
  instance_id   Int              @id @default(autoincrement())
  workflow_instance_id Int
  step_id       Int
  status        String
  result        Json            @default("{}")
  started_at    DateTime       @default(now())
  completed_at  DateTime?
  workflow_instance WorkflowInstance @relation(fields: [workflow_instance_id], references: [instance_id], onDelete: Cascade)
  step          WorkflowStep    @relation(fields: [step_id], references: [step_id])

  @@index([workflow_instance_id])
  @@index([step_id])
  @@index([status])
}

model Activity {
  activity_id Int      @id @default(autoincrement())
  user_id     Int
  type        String
  entity_type String
  entity_id   Int
  action      String
  details     Json     @default("{}")
  created_at  DateTime @default(now())
  user        User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@index([type])
  @@index([entity_type, entity_id])
  @@index([created_at])
}
