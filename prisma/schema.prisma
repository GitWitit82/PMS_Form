generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Contact {
  contact_id  Int      @id @default(autoincrement())
  customer_id Int
  name        String
  email       String?
  phone       String?
  role        String?
  created_at  DateTime @default(now())
  Customer    Customer @relation(fields: [customer_id], references: [customer_id], onDelete: Cascade)
}

model Customer {
  customer_id Int       @id @default(autoincrement())
  name        String
  email       String?
  phone       String?
  created_at  DateTime  @default(now())
  Contact     Contact[]
  Project     Project[]
  forms       FormSubmission[]
}

model Department {
  department_id Int        @id @default(autoincrement())
  name          String     @unique
  description   String?
  color         String     @default("#2563eb") // Default blue color
  created_at    DateTime   @default(now())
  Resource      Resource[]
  Task          Task[]
  forms         Form[]
}

model Project {
  project_id  Int       @id @default(autoincrement())
  customer_id Int
  name        String
  description String?
  start_date  DateTime?
  end_date    DateTime?
  status      String    @default("Not Started")
  created_at  DateTime  @default(now())
  Customer    Customer  @relation(fields: [customer_id], references: [customer_id], onDelete: Cascade)
  Task        Task[]
  forms       FormSubmission[]
}

model Resource {
  resource_id   Int        @id @default(autoincrement())
  department_id Int
  name          String
  email         String?    @unique
  phone         String?
  is_active     Boolean    @default(true)
  created_at    DateTime   @default(now())
  user_id       Int?       @unique
  Department    Department @relation(fields: [department_id], references: [department_id], onDelete: Cascade)
  Task          Task[]
  user          User?      @relation(fields: [user_id], references: [user_id])
}

model Task {
  task_id                Int         @id @default(autoincrement())
  project_id             Int
  resource_id            Int?
  department_id          Int?
  name                   String
  description            String?
  scheduled_start_time   DateTime?
  scheduled_start_date   DateTime?
  scheduled_end_time     DateTime?
  scheduled_end_date     DateTime?
  actual_start_time      DateTime?
  actual_start_date      DateTime?
  actual_end_time        DateTime?
  actual_end_date        DateTime?
  delay_duration         String?
  delay_reason           String?
  delay_status           String?
  completion_status      String?
  priority               String?
  status                 String      @default("Pending")
  last_status_updated_at DateTime?
  created_at             DateTime    @default(now())
  Department             Department? @relation(fields: [department_id], references: [department_id])
  Project                Project     @relation(fields: [project_id], references: [project_id], onDelete: Cascade)
  Resource               Resource?   @relation(fields: [resource_id], references: [resource_id])
}

enum UserRole {
  ADMIN
  STAFF
  PROJECT_MGT
  CEO
}

model User {
  user_id    Int       @id @default(autoincrement())
  username   String    @unique
  email      String    @unique
  pin_hash   String
  role       UserRole  @default(STAFF)
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  resource   Resource?
  Activity   Activity[]
  forms      FormSubmission[]

  @@map("users")
}

model Activity {
  activity_id Int      @id @default(autoincrement())
  user_id     Int
  type        String
  entity_type String
  entity_id   Int
  action      String
  details     Json     @default("{}")
  created_at  DateTime @default(now())
  user        User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@index([type])
  @@index([entity_type, entity_id])
  @@index([created_at])
}

model Workflow {
  workflow_id   Int            @id @default(autoincrement())
  name          String
  description   String?
  created_at    DateTime       @default(now())
  workflowTasks WorkflowTask[]
}

model WorkflowTask {
  workflow_task_id     Int       @id @default(autoincrement())
  workflow_id          Int
  name                 String
  description          String?
  scheduled_start_time DateTime?
  scheduled_start_date DateTime?
  scheduled_end_time   DateTime?
  scheduled_end_date   DateTime?
  priority             String?
  stage                String?
  order                Int
  has_form            Boolean    @default(false)
  form_id             Int?       // Optional reference to a form
  workflow            Workflow   @relation(fields: [workflow_id], references: [workflow_id], onDelete: Cascade)
  form                Form?      @relation(fields: [form_id], references: [form_id])
}

model Form {
  form_id       Int           @id @default(autoincrement())
  title         String
  department_id Int
  description   String?
  instructions  String?
  type          String       @default("CHECKLIST") // CHECKLIST, DATA_ENTRY, APPROVAL, etc.
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  department    Department    @relation(fields: [department_id], references: [department_id])
  templates     FormTemplate[]
  submissions   FormSubmission[]
  workflowTasks WorkflowTask[] // Relation to workflow tasks that use this form
}

model FormTemplate {
  template_id   Int           @id @default(autoincrement())
  form_id       Int
  name          String
  description   String?
  fields        Json          // Stores field configurations
  layout        Json          // Stores layout information
  version       Int           @default(1)
  is_active     Boolean       @default(true)
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  form          Form          @relation(fields: [form_id], references: [form_id], onDelete: Cascade)
  submissions   FormSubmission[]
}

model FormSubmission {
  submission_id Int           @id @default(autoincrement())
  form_id       Int
  template_id   Int
  project_id    Int?
  customer_id   Int?
  submitted_by  Int          // User ID
  workflow_task_id Int?      // Optional reference to the workflow task this submission is for
  data          Json         // Stores form data
  status        String       @default("draft") // draft, submitted, approved, rejected
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  form          Form         @relation(fields: [form_id], references: [form_id])
  template      FormTemplate @relation(fields: [template_id], references: [template_id])
  project       Project?     @relation(fields: [project_id], references: [project_id])
  customer      Customer?    @relation(fields: [customer_id], references: [customer_id])
  user          User         @relation(fields: [submitted_by], references: [user_id])
}
