generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Contact {
  contact_id  Int      @id @default(autoincrement())
  customer_id Int
  name        String
  email       String?
  phone       String?
  role        String?
  created_at  DateTime @default(now())
  Customer    Customer @relation(fields: [customer_id], references: [customer_id], onDelete: Cascade)
}

model Customer {
  customer_id Int              @id @default(autoincrement())
  name        String
  email       String?
  phone       String?
  created_at  DateTime         @default(now())
  Contact     Contact[]
  Project     Project[]
  forms       FormSubmission[]
}

model Department {
  department_id Int        @id @default(autoincrement())
  name          String     @unique
  description   String?
  color         String     @default("#2563eb")
  created_at    DateTime   @default(now())
  resources     Resource[]
  tasks         Task[]     @relation("DepartmentTasks")
  forms         Form[]
}

model Project {
  project_id     Int              @id @default(autoincrement())
  name           String
  description    String?
  customer_id    Int
  status         String           @default("Not Started")
  start_date     DateTime?
  end_date       DateTime?
  created_at     DateTime         @default(now())
  vin_number     String?
  invoice_number String?
  customer       Customer         @relation(fields: [customer_id], references: [customer_id])
  forms          FormSubmission[]
  workflows      Workflow[] // One-to-many relation with Workflow

  @@map("projects")
}

model Resource {
  resource_id   Int        @id @default(autoincrement())
  department_id Int
  name          String
  email         String?    @unique
  phone         String?
  is_active     Boolean    @default(true)
  created_at    DateTime   @default(now())
  user_id       Int?       @unique
  department    Department @relation(fields: [department_id], references: [department_id], onDelete: Cascade)
  tasks         Task[]     @relation("ResourceTasks")
  user          User?      @relation(fields: [user_id], references: [user_id])
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  BLOCKED
}

model Task {
  task_id              Int        @id @default(autoincrement())
  name                 String
  description          String?
  status               TaskStatus @default(NOT_STARTED)
  order                Int
  workflow_id          Int
  department_id        Int?
  resource_id          Int?
  scheduled_start_time DateTime?
  scheduled_start_date DateTime?
  scheduled_end_time   DateTime?
  scheduled_end_date   DateTime?
  actual_start         DateTime?
  actual_end           DateTime?
  priority             String?
  stage                String?
  progress             Float      @default(0)
  estimated_duration   Int? // Duration in minutes
  created_at           DateTime   @default(now())
  updated_at           DateTime   @updatedAt

  // Relations
  workflow   Workflow    @relation(fields: [workflow_id], references: [workflow_id])
  department Department? @relation("DepartmentTasks", fields: [department_id], references: [department_id])
  resource   Resource?   @relation("ResourceTasks", fields: [resource_id], references: [resource_id])

  // Dependencies
  dependencies    TaskDependency[] @relation("Dependencies")
  dependent_tasks TaskDependency[] @relation("DependentTasks")

  @@map("tasks")
}

enum UserRole {
  ADMIN
  STAFF
  PROJECT_MGT
  CEO
}

model User {
  user_id          Int               @id @default(autoincrement())
  username         String            @unique
  email            String            @unique
  pin_hash         String
  role             UserRole          @default(STAFF)
  created_at       DateTime          @default(now())
  updated_at       DateTime          @default(now())
  resource         Resource?
  Activity         Activity[]
  forms            FormSubmission[]
  workflowVersions WorkflowVersion[]

  @@map("users")
}

model Activity {
  activity_id Int      @id @default(autoincrement())
  user_id     Int
  type        String
  entity_type String
  entity_id   Int
  action      String
  details     Json     @default("{}")
  created_at  DateTime @default(now())
  user        User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@index([type])
  @@index([entity_type, entity_id])
  @@index([created_at])
}

model Workflow {
  workflow_id Int      @id @default(autoincrement())
  name        String
  description String?
  project_id  Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  project  Project           @relation(fields: [project_id], references: [project_id])
  tasks    Task[]
  versions WorkflowVersion[]
  progress WorkflowProgress?

  @@map("workflows")
}

model WorkflowVersion {
  version_id     Int      @id @default(autoincrement())
  workflow_id    Int
  version_number Int
  changes        Json
  created_by     Int
  created_at     DateTime @default(now())
  is_active      Boolean  @default(true)

  workflow Workflow @relation(fields: [workflow_id], references: [workflow_id], onDelete: Cascade)
  user     User     @relation(fields: [created_by], references: [user_id])

  @@unique([workflow_id, version_number])
}

model WorkflowProgress {
  progress_id          Int       @id @default(autoincrement())
  workflow_id          Int       @unique
  total_tasks          Int       @default(0)
  completed_tasks      Int       @default(0)
  in_progress_tasks    Int       @default(0)
  blocked_tasks        Int       @default(0)
  overall_progress     Float     @default(0)
  estimated_completion DateTime?
  last_updated         DateTime  @default(now())

  workflow Workflow @relation(fields: [workflow_id], references: [workflow_id], onDelete: Cascade)
}

model TaskDependency {
  dependency_id     Int      @id @default(autoincrement())
  task_id           Int
  dependent_task_id Int
  dependency_type   String // start-to-start, start-to-finish, finish-to-start, finish-to-finish
  lag_time          Int? // Time in minutes
  created_at        DateTime @default(now())
  task              Task     @relation("DependentTasks", fields: [task_id], references: [task_id], onDelete: Cascade)
  dependent_task    Task     @relation("Dependencies", fields: [dependent_task_id], references: [task_id], onDelete: Cascade)

  @@unique([task_id, dependent_task_id])
}

model Form {
  form_id       Int              @id @default(autoincrement())
  title         String
  department_id Int
  description   String?
  instructions  String?
  type          String           @default("CHECKLIST") // CHECKLIST, PROJECT_CHECKLIST, QUALITY_CONTROL, CUSTOMER_APPROVAL
  page          Int              @default(1)
  created_at    DateTime         @default(now())
  updated_at    DateTime         @updatedAt
  department    Department       @relation(fields: [department_id], references: [department_id])
  templates     FormTemplate[]
  submissions   FormSubmission[]
}

model FormTemplate {
  template_id Int              @id @default(autoincrement())
  form_id     Int
  name        String
  description String?
  fields      Json // Stores field configurations
  layout      Json // Stores layout information
  version     Int              @default(1)
  is_active   Boolean          @default(true)
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  form        Form             @relation(fields: [form_id], references: [form_id], onDelete: Cascade)
  submissions FormSubmission[]
}

model FormSubmission {
  submission_id Int          @id @default(autoincrement())
  form_id       Int
  template_id   Int
  project_id    Int?
  customer_id   Int?
  submitted_by  Int // User ID
  data          Json // Stores form data
  status        String       @default("draft") // draft, submitted, approved, rejected
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  form          Form         @relation(fields: [form_id], references: [form_id])
  template      FormTemplate @relation(fields: [template_id], references: [template_id])
  project       Project?     @relation(fields: [project_id], references: [project_id])
  customer      Customer?    @relation(fields: [customer_id], references: [customer_id])
  user          User         @relation(fields: [submitted_by], references: [user_id])
}
